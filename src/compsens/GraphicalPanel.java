/*
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

package compsens; 
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;

// To play with events! (and forward the CameraExposure time changed to the Arduino
import org.micromanager.events.EventManager;
import com.google.common.eventbus.Subscribe; 
import org.micromanager.api.events.ExposureChangedEvent;


public class GraphicalPanel extends javax.swing.JFrame {
    Parameters params = new Parameters();
    PlotTools plotting = new PlotTools(); // Plotting with ImageJ
    BasisTools basistools = new BasisTools(); // Load CSV basis
    ArduinoLibs arduinolibs = new ArduinoLibs(); // Get ready to speak Arduino :)
    javax.swing.JFileChooser fc;
    
    /** Creates new form GraphicalPanel */
    public GraphicalPanel() {
        initComponents();
        EventManager.register(this); // Get the bus and register to it
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        celsiusLabel = new javax.swing.JLabel();
        convertButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        basisComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        loadBasis = new javax.swing.JButton();
        path_label = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        createInoFile = new javax.swing.JButton();
        path_label1 = new javax.swing.JLabel();
        basis_id_label = new javax.swing.JLabel();
        ArduinoConnectButton = new javax.swing.JButton();
        blink_led_button = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        activate_cs_button = new javax.swing.JButton();
        exposure_time_label = new javax.swing.JLabel();
        activate_cs_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compressed Sensing");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        celsiusLabel.setText("Select basis element");

        convertButton.setText("Show");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBasisElement(evt);
            }
        });

        jLabel1.setText("Basis");

        jLabel3.setText("Be considered of your environment");

        jLabel4.setIcon(new javax.swing.ImageIcon("/home/maxime/zimmerdarzacq/11_micromanager/CS-app/src/main/java/mw/app/uniuni.jpg")); // NOI18N

        loadBasis.setText("Load other basis");
        loadBasis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBasisActionPerformed(evt);
            }
        });

        path_label.setText("path");

        createInoFile.setText("Export to Arduino");
        createInoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createInoFileActionPerformed(evt);
            }
        });

        path_label1.setText("loaded basis:");

        basis_id_label.setText("none");

        ArduinoConnectButton.setText("Detect basis");
        ArduinoConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArduinoConnectButtonActionPerformed(evt);
            }
        });

        blink_led_button.setText("Blink led");
        blink_led_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blink_led_buttonActionPerformed(evt);
            }
        });

        activate_cs_button.setText("Enable/Disable CS");
        activate_cs_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activate_cs_buttonActionPerformed(evt);
            }
        });

        exposure_time_label.setBackground(new java.awt.Color(194, 205, 110));
        exposure_time_label.setText("Exp: NA ms");

        activate_cs_label.setBackground(new java.awt.Color(194, 205, 110));
        activate_cs_label.setText("CS: NA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator5)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(1, 1, 1))
                    .addComponent(path_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 60, Short.MAX_VALUE)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(path_label1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(basis_id_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ArduinoConnectButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(loadBasis)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(createInoFile))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(celsiusLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(basisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(convertButton)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(73, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blink_led_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activate_cs_button)
                .addGap(4, 4, 4)
                .addComponent(exposure_time_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activate_cs_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(celsiusLabel)
                    .addComponent(basisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(convertButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadBasis)
                    .addComponent(createInoFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(path_label)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(path_label1)
                    .addComponent(basis_id_label)
                    .addComponent(ArduinoConnectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blink_led_button)
                    .addComponent(activate_cs_button)
                    .addComponent(exposure_time_label)
                    .addComponent(activate_cs_label))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* This event will relay to the core the Exposure time whenever it is accessed */
    @Subscribe
    public void onExposureChanged(ExposureChangedEvent event) {
        System.out.println("Camera exposure changed and is now " + event.getNewExposureTime());
        try {
            params.core_.setProperty("Arduino-Hub", "Arduino Exposure", event.getNewExposureTime()); // Forward the update information to the core
            exposure_time_label.setText("Exp: " + event.getNewExposureTime() + " ms");
        } catch (Exception ex) {
            Logger.getLogger(GraphicalPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void showBasisElement(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBasisElement
        // Call the drawing stuff!
        System.out.println("Showing basis element " + basisComboBox.getSelectedIndex());
        plotting.plotBasis(params.basis[basisComboBox.getSelectedIndex()], "Meas. " + basisComboBox.getSelectedIndex());
    }//GEN-LAST:event_showBasisElement

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // This guy should be called when the window is displayed...
        for (int i=0; i<params.basis_row; i++){
            basisComboBox.addItem("meas. " + i);
        }
        path_label.setText(params.basisPath);
    }//GEN-LAST:event_formComponentShown
    /*
    Open a File Chooser to find a CSV basis file on the disk, and open it.
    */
    private void loadBasisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBasisActionPerformed
        // Open a filechooser (fc) to choose a file
        fc = new javax.swing.JFileChooser();
        fc.setAcceptAllFileFilterUsed(false);        
        fc.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV files", "csv"));
        int returnVal;
        returnVal = fc.showOpenDialog(GraphicalPanel.this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fc.getSelectedFile(); // Show the dialog
            params.basisPath = file.getPath(); // Extract path
            double basis[][] = basistools.readBasis(params.basisPath); // Load new matrix
            
            // Update communication object
            params.basis = basis;
            params.basis_row = basis.length;
            params.basis_col = basis[0].length;            
            System.out.println("Loaded a measurement matrix with " + basis.length + " lines and " + basis[0].length + " columns from the file: " + params.basisPath);
            
            // Update graphics
            path_label.setText(params.basisPath);
            basisComboBox.removeAllItems();
            for (int i=0; i<params.basis_row; i++){
                basisComboBox.addItem("meas. " + i);
            }            
        } else {
            System.out.println("File loading cancelled");
        }
    }//GEN-LAST:event_loadBasisActionPerformed
    /*
    Save the basis to the right format. The output is a C file
    So the whole stuff is a little bit dirty. And rough on the edges.
    */
    private void createInoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createInoFileActionPerformed
        // Declarations
        String ino_content;
        int returnVal;
        
        // Get content
        ino_content = arduinolibs.csvToIno(params.basis);
        
        // Know where to save
        fc = new javax.swing.JFileChooser();
        fc.setDialogTitle("Where to save the file?");
        returnVal = fc.showSaveDialog(GraphicalPanel.this); // Show the dialog
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fc.getSelectedFile(); 
            
            // Saving
            System.out.println("Saving to " + file.getPath());

            java.io.PrintWriter writer = null;
            try  {
                writer = new java.io.PrintWriter(file);
                writer.print(ino_content);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } finally {
                if ( writer != null ) {
                    writer.close();
                }
            }
        } else {
            System.out.println("No file has been selected, aborting");
        }
        
        // Show a dialog with hints
        javax.swing.JOptionPane.showMessageDialog(this, "What should I do now?\n\n Read the online docs to learn about what\n to do with Arduino header files.\n You need to upload this basis to the Arduino before\n proceeding. You need to use the Arduino IDE to do so.");
    }//GEN-LAST:event_createInoFileActionPerformed

    /*
    * Function cehcks for the presence of the Arduino and report whether the 
    * connection was successful.
    */
    private void ArduinoConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArduinoConnectButtonActionPerformed
        String ret;
        
        // Connect with Arduino
        ret = arduinolibs.arduinoConnect(params.core_);
        System.out.println("Connection with Arduino: " + ret);
        if (ret.equals("ok")) {
            params.arduino_present = true;
            System.out.println("do stuff here");
        } else {
            params.arduino_present = false;
            javax.swing.JOptionPane.showMessageDialog(this, "Something went wrong when initializing the Arduino. Have a look at the logs");
            return;
        }
        
        // Get basisId
        try { 
            ret = arduinolibs.arduinoBasisId(params.core_); // Throws exception if things go wrong
            params.arduino_basis_id = Integer.parseInt(ret);
        } catch (Exception ex) {
            params.arduino_present = false;
            javax.swing.JOptionPane.showMessageDialog(this, "Unable to get the basis identifier, aborting");
            return;
        }
        
        // Check if it matches our Id
        System.out.println("codes: " + params.arduino_basis_id + " " + basistools.hashBasis(params.basis));
        if (params.arduino_basis_id != basistools.hashBasis(params.basis)) {
            javax.swing.JOptionPane.showMessageDialog(this, "The Arduino basis code do not match the micromanager basis code. Please load another basis.");
            return;
        }
        
        basis_id_label.setText(ret);
        javax.swing.JOptionPane.showMessageDialog(this, "Basis in use is " + ret);        
        
    }//GEN-LAST:event_ArduinoConnectButtonActionPerformed

    private void blink_led_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blink_led_buttonActionPerformed
        try {
            System.out.println("Switching the led 13 on for 500ms");
            params.core_.setProperty("Arduino-Switch", "State", 32);
            params.core_.sleep(500); // This hangs the full interface
            params.core_.setProperty("Arduino-Switch", "State", 0);
        } catch (Exception ex) {
            Logger.getLogger(GraphicalPanel.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.JOptionPane.showMessageDialog(this, "This is a total failure");   
        }
        
    }//GEN-LAST:event_blink_led_buttonActionPerformed

    /* Communicate with the Enable/Disable CS property of the Arduino device. 
    Should only be accessed if the Arduino is available */ 
    private void activate_cs_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activate_cs_buttonActionPerformed
        try {
            // TODO check if Arduino accepts CS mode
            // TODO send on/off commands.
            if ("0".equals(params.core_.getProperty("Arduino-Hub", "Compressed sensing"))) {
                params.core_.setProperty("Arduino-Hub", "Compressed sensing", 1);
                activate_cs_label.setText("CS: On");
                System.out.println("CS mode on");
            } else {
                params.core_.setProperty("Arduino-Hub", "Compressed sensing", 0);
                activate_cs_label.setText("CS: Off");
                System.out.println("CS mode off");
            }
        } catch (Exception ex) {
            Logger.getLogger(GraphicalPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_activate_cs_buttonActionPerformed
    
    /**
     * The main function
     */
    public static void main() { // String args[]
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphicalPanel().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ArduinoConnectButton;
    private javax.swing.JButton activate_cs_button;
    private javax.swing.JLabel activate_cs_label;
    private javax.swing.JComboBox basisComboBox;
    private javax.swing.JLabel basis_id_label;
    private javax.swing.JButton blink_led_button;
    private javax.swing.JLabel celsiusLabel;
    private javax.swing.JButton convertButton;
    private javax.swing.JButton createInoFile;
    private javax.swing.JLabel exposure_time_label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JButton loadBasis;
    private javax.swing.JLabel path_label;
    private javax.swing.JLabel path_label1;
    // End of variables declaration//GEN-END:variables

   
}
